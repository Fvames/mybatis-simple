<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="dev.lishengjie.blog.BlogMapper">
  <resultMap id="BaseResultMap" type="dev.lishengjie.beans.Blog">
    <result column="id" jdbcType="INTEGER" property="id" />
    <result column="title" jdbcType="CHAR" property="title" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="author_id" jdbcType="INTEGER" property="authorId" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="dev.lishengjie.beans.Blog">
    <result column="content" jdbcType="LONGVARBINARY" property="content" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>

  <sql id="Base_Column_List">
    id, title, create_time, update_time, author_id
  </sql>
  <sql id="Blob_Column_List">
    content
  </sql>

  <select id="selectByExampleWithBLOBs" parameterType="dev.lishengjie.beans.BlogExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from blog
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="dev.lishengjie.beans.BlogExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from blog
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="dev.lishengjie.beans.BlogExample">
    delete from blog
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="dev.lishengjie.beans.Blog">
    insert into blog (id, title, create_time, 
      update_time, author_id, content
      )
    values (#{id,jdbcType=INTEGER}, #{title,jdbcType=CHAR}, #{createTime,jdbcType=TIMESTAMP}, 
      #{updateTime,jdbcType=TIMESTAMP}, #{authorId,jdbcType=INTEGER}, #{content,jdbcType=LONGVARBINARY}
      )
  </insert>
  <insert id="insertSelective" parameterType="dev.lishengjie.beans.Blog">
    insert into blog
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="title != null">
        title,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="authorId != null">
        author_id,
      </if>
      <if test="content != null">
        content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="title != null">
        #{title,jdbcType=CHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="authorId != null">
        #{authorId,jdbcType=INTEGER},
      </if>
      <if test="content != null">
        #{content,jdbcType=LONGVARBINARY},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="dev.lishengjie.beans.BlogExample" resultType="java.lang.Integer">
    select count(*) from blog
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update blog
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.title != null">
        title = #{record.title,jdbcType=CHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.authorId != null">
        author_id = #{record.authorId,jdbcType=INTEGER},
      </if>
      <if test="record.content != null">
        content = #{record.content,jdbcType=LONGVARBINARY},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update blog
    set id = #{record.id,jdbcType=INTEGER},
      title = #{record.title,jdbcType=CHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      author_id = #{record.authorId,jdbcType=INTEGER},
      content = #{record.content,jdbcType=LONGVARBINARY}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update blog
    set id = #{record.id,jdbcType=INTEGER},
      title = #{record.title,jdbcType=CHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      author_id = #{record.authorId,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>

  <select id="selectByPrimaryKey" parameterType="Integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from blog
    where id=#{id, jdbcType=INTEGER}
  </select>
  
  <!--嵌套查询-->
  <resultMap id="nestSelectMap" type="dev.lishengjie.beans.Blog">
    <id column="id" jdbcType="INTEGER" property="id"/>
    <result column="title" jdbcType="CHAR" property="title"/>
    <result column="content" jdbcType="CHAR" property="content"/>
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
    <association column="author_id" property="author"
                  select="dev.lishengjie.blog.AuthorMapper.selectById">
    </association>
  </resultMap>
  
  <select id="selectBlogAuthor" parameterType="INTEGER" resultMap="nestSelectMap" >
    select
    <include refid="Base_Column_List"/>
    from blog
    where id=#{id,jdbcType=INTEGER}
  </select>

  <!--嵌套结果-->
  <resultMap id="nestResultMap" type="dev.lishengjie.beans.Blog">
    <id column="id" jdbcType="INTEGER" property="id"/>
    <result column="title" jdbcType="CHAR" property="title"/>
    <result column="content" jdbcType="CHAR" property="content"/>
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
    <association column="author_id" property="author" javaType="dev.lishengjie.beans.Author">
      <id column="id" jdbcType="INTEGER" property="id"/>
      <result column="name" jdbcType="CHAR" property="name" />
      <result column="sex" jdbcType="CHAR" property="sex" />
      <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
      <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    </association>
  </resultMap>
  <select id="selectBlogAuthor嵌套结果" parameterType="INTEGER" resultMap="nestResultMap" >
    select
    *
    from blog b, author a
    where b.id=#{id,jdbcType=INTEGER}
    and a.id=b.author_id
  </select>


  <!--嵌套结果-->
  <resultMap id="nestResultMapOfBlogPosts" type="dev.lishengjie.beans.Blog">
    <id column="id" jdbcType="INTEGER" property="id"/>
    <result column="title" jdbcType="CHAR" property="title"/>
    <result column="content" jdbcType="CHAR" property="content"/>
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
    <!--嵌套结果-->
    <!--<collection property="posts" ofType="dev.lishengjie.beans.Posts">
      <id column="id" jdbcType="INTEGER" property="id"/>
      <result column="content" jdbcType="CHAR" property="content"/>
      <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
    </collection>-->
    <!--嵌套查询-->
    <collection column="id" property="posts"
                select="dev.lishengjie.blog.PostsMapper.selectByBlogId" ofType="dev.lishengjie.beans.Posts" >
    </collection>
  </resultMap>

  <select id="selectBlogPosts嵌套结果" parameterType="INTEGER" resultMap="nestResultMapOfBlogPosts" >
    select
    *
    from blog b
    where b.id = #{id,jdbcType=INTEGER}

  </select>

    <insert id="batchInsertSelective" parameterType="dev.lishengjie.beans.Blog">
        insert into blog (id, title, author_id, content) values
        <foreach collection="list" item="item" separator=",">
        (#{item.id,jdbcType=INTEGER}, #{item.title,jdbcType=CHAR}, #{item.authorId,jdbcType=INTEGER}, #{item.content,jdbcType=LONGVARBINARY} )
        </foreach>
    </insert>
</mapper>